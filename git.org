#+TITLE:   git
#+AUTHOR: energos
#+OPTIONS: toc:nil num:nil html-postamble:nil
#+STARTUP: showall

* Where to start
  - [[https://git-scm.com/][git home page]]
  - [[https://git-scm.com/book/en/v2][Pro Git]] book
  - [[https://github.com/pluralsight/git-internals-pdf][Git Internals]] book
* Tutorials
  - [[https://try.github.io/][Try Git]]
  - [[https://githowto.com/][GitHowTo: Guided Git Tutorial]]
  - [[https://www.youtube.com/playlist?list=PLeo1K3hjS3usJuxZZUBdjAcilgfQHkRzW][Git/Github Tutorial - YouTube]]
  - [[https://www.youtube.com/playlist?list=PL_m-qmrTyRPxR01vXMeUuok4q1MgZvUZv][git commands - YouTube]]
  - [[https://www.youtube.com/playlist?list=PL-osiE80TeTuRUfjRe54Eea17-YfnOOAx][Git Tutorials - YouTube]]
* Installing git
  - [[https://git-scm.com/downloads][Git - Downloads]]
  - With your favorite package manager
    : # emerge --ask --verbose dev-vcs/git
  - [[https://www.cygwin.com/][Cygwin]] - get git and the whole enchilada
  - chocolatey, msys2, bash on windows, etc.
* Magit
  Oh, yeah, Magit ROCKS!
  - [[https://magit.vc/][It's Magit! A Git Porcelain inside Emacs]]
  - [[file:magit.org][Magit]]
* Setting a GitHub repository
  - [[https://help.github.com/][GitHub Help]]
* Create a new repository and export to GitHub
  - [[https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository][Pro Git - Getting a Git Repository]]
  #+BEGIN_SRC sh
  $ echo "#+TITLE: sandbox" > README.org
  $ git init
  $ git config user.name "energos"
  $ git config user.email "energos@users.noreply.github.com"
  $ git remote add origin git@github.com:energos/sandbox.git
  $ git add README.org
  $ git commit -m "Initial commit"
  $ git push -u origin master
  #+END_SRC
* Working Tree / Staging Area / Repository
  - [[https://git-scm.com/book/en/v2/Getting-Started-Git-Basics][Pro Git - Git Basics]]
  #+BEGIN_EXAMPLE
  Working       Staging      .git Local         Remote
  Tree          Area         Repository         Repository
    |             |              |                  |
    |--- Stage -->|--- Commit -->|-------- Push --->|
    |                            |                  |
    |<-------- Checkout ---------|<------- Fetch ---|
    |                            |                  |
    |<--------- Merge -----------|<-                |
    |                               \               |
    |<-------------------------------+-<-- Pull ----|
  #+END_EXAMPLE
* Command line help
  - [[https://git-scm.com/book/en/v2/Getting-Started-Getting-Help][Pro Git - Getting Help]]
  #+BEGIN_SRC sh
  $ git help
  $ git --help
  $ git help <verb>
  $ git <verb> --help
  $ man git
  $ man git-<verb>
  #+END_SRC
* Add
  - [[https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository][Pro Git - Recording Changes to the Repository]]
  - *git stage* is a synonym for *git add*
  #+BEGIN_SRC sh
  $ git add <file>
  $ git add -A
  #+END_SRC
** Undo an Add (Unstage)
   #+BEGIN_SRC sh
   $ git reset HEAD <file>
   #+END_SRC
* Discard changes to a file
  - [[https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things][Pro Git - Undoing Things]]
** Unstaged changes
  #+BEGIN_SRC sh
  $ git checkout -- <file>
  #+END_SRC
** Staged changes
   First, unstage the changes
   #+BEGIN_SRC sh
   $ git reset HEAD <file>
   #+END_SRC
   then, discard the changes
   #+BEGIN_SRC sh
   $ git checkout -- <file>
   #+END_SRC
* Diff
  - *git diff* shows unstaged changes
  - *git diff --staged* shows staged changes
  - *--staged* is a synonym of *--cached*
* Log
  - [[https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History][Pro Git - Viewing the Commit History]]
  #+BEGIN_SRC sh
  $ git log
  $ git log --stat
  $ git log -p
  $ git log -1
  $ git log --pretty=oneline
  $ git log --pretty=format:"%h: %s - %ar" --graph
  $ git log --oneline
  $ git log --oneline --since=6.hours
  $ git log --oneline -i --grep remove
  $ git log --oneline -i -Shello
  $ git log --oneline -- foo.txt
  #+END_SRC
* Remotes
  - [[https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes][Pro Git - Working with Remotes]]
  #+BEGIN_SRC sh
  $ git remote add origin git@github.com:energos/sandbox.git
  $ git remote -v
  $ git remote show origin
  $ git ls-remote
  #+END_SRC
** Fetch and Pull
   - *git pull* = *git fetch* + *git merge*
   #+BEGIN_SRC sh
   $ git fetch <remote>
   $ git fetch origin
   #+END_SRC
** Push
   #+BEGIN_SRC sh
   $ git push <remote> <branch>
   $ git push origin master
   #+END_SRC
** Rename and Remove
  #+BEGIN_SRC sh
  $ git remote rename <remote-name> <remote-new-name>
  $ git remote rm <remote-name>
  #+END_SRC
* Tags
  - [[https://git-scm.com/book/en/v2/Git-Basics-Tagging][Pro Git - Tagging]]
  #+BEGIN_SRC sh
  $ git tag                                     # list tags
  $ git tag -l                                  # list tags
  $ git tag -l <pattern>                        # list tags matching <pattern>
  $ git tag <tagname>                           # create a lightweight tag
  $ git tag -a <tagname>                        # create an annotated tag
  $ git tag -a <tagname> -m "annotation"        # create an annotated tag
  $ git tag -d <tagname>                        # delete tag
  $ git tag <tagname> <commit>                  # tag a specific commit
  $ git push <remote> <tagname>                 # push tag to remote server
  $ git push <remote> --tags                    # push all tags to remote server
  #+END_SRC
* Aliases
  - [[https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases][Pro Git - Git Aliases]]
  #+BEGIN_SRC sh
  $ git config alias.last 'log -1 HEAD'
  #+END_SRC
* Branches
  - [[https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell][Pro Git - Branching]]
  - Create new branch
    : $ git branch testing
  - Switch to the new (or other existing) branch
    : $ git checkout testing
  - Create new branch and switch to it in one command
    This is equivalent to the 2 previous commands
    : $ git checkout -b testing
  - Edit some stuff and do a commit in the brand new branch
    : $ git commit -a -m 'My brand new "testing" branch'
  - Edit some stuff without commiting
  - Switch back to master branch
    : git checkout master
    Cool! You will be warned if your tree is 'dirty':
    #+BEGIN_EXAMPLE
    error: Your local changes to the following files would be overwritten by checkout:
	git.org
    Please commit your changes or stash them before you switch branches.
    Aborting
    #+END_EXAMPLE
  - So, let's commit it in "testing" before branching back to "master"
    : $ git commit -a -m 'Add more stuff in "testing" branch'
  - Created a "testing" branch. Added some stuff to it.
  - Now back to "master" branch. Do some editing and then commit:
    : $ git checkout master
    edit some stuff
    : $ git commit -a -m 'Back to "master" again'
  - To get a nice log of all branches:
    : $ git log --oneline --all --graph
  - Merge time baby
    : $ git merge testing
  - Delete old branch (optional)
    : $ git branch -d testing
  - List current branches
    : $ git branch
    : $ git branch -v
    : $ git branch --merged
    : $ git branch --no-merged
  - Remote branches
    : $ git remote -v
    : $ git remote show origin
    : $ git ls-remote
  - Tracking branches
    : $ git branch -vv
  - How to mark a branch as a tracking branch?
    #+BEGIN_EXAMPLE
     $ git branch -vv
      master  0dbd592 [origin/master] Tracking branches
      private 3912216 Start a private branch
    * public  eebb246 Pushing a private branch
    #+END_EXAMPLE
    : $ git branch -u origin/public public
    #+BEGIN_EXAMPLE
    $ git branch -vv
    * master  137285a [origin/master] How to define a tracking branch?
      private 3912216 Start a private branch
      public  e3c9338 [origin/public: ahead 2] Pushing a public branch
    #+END_EXAMPLE
* Multiple remote servers
  : $ git remote add  git@gitlab.com:nononono/sandbox.git
* Git hosting servers
  - [[https://github.com/][GitHub]]
  - [[https://gitlab.com/][GitLab]]
  - [[https://bitbucket.org/][Bitbucket]]
  - [[https://gitea.io/en-US/][Gitea]]
  - [[https://gogs.io/][Gogs]]
  - Self hosted
* Using meld as a diff tool
  : $ git config diff.tool meld
  : $ git config difftool.prompt false
* Using meld as a merge tool
  - [[http://meldmerge.org/help/resolving-conflicts.html][Meld - Resolving merge conflicts]]
  - [[https://www.youtube.com/watch?v=3Qynj8WUwgs&index=9&t=213s&list=PLeo1K3hjS3usJuxZZUBdjAcilgfQHkRzW][Git/Github Tutorial 9: Diff and Merge using meld]]
  : $ git config merge.tool meld
  : $ git config mergetool.keepBackup false
* Unsorted notes
  - [[https://github.com/github/gitignore][GitHub - A collection of useful .gitignore templates]]
