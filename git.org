#+TITLE: Energos's Anarchic Git Notes
#+AUTHOR: energos
#+OPTIONS: toc:nil num:nil html-postamble:nil
#+STARTUP: showall

* Where to start
  - [[https://git-scm.com/][git home page]]
  - [[https://www.quora.com/What-is-git-and-why-should-I-use-it][What is git and why should I use it? - Quora]]
  - [[https://git-scm.com/book/en/v2][Pro Git]] book [[https://github.com/progit/progit2/releases/download/2.1.106/progit.pdf][(pdf)]]
  - [[https://github.com/pluralsight/git-internals-pdf][Git Internals]] book [[http://opcode.org/peepcode-git.pdf][(pdf)]]
* Tutorials
  - [[https://try.github.io/][Try Git]]
  - [[http://gitimmersion.com/index.html][Git Immersion]]
  - [[http://rogerdudler.github.io/git-guide/][git - the simple guide - no deep shit!]]
  - [[https://githowto.com/][GitHowTo: Guided Git Tutorial]]
  - [[http://hades.github.io/2010/01/git-your-friend-not-foe/][Git Is Your Friend not a Foe]]
  - [[https://www.youtube.com/playlist?list=PLeo1K3hjS3usJuxZZUBdjAcilgfQHkRzW][Git/Github Tutorial - YouTube]]
  - [[https://www.youtube.com/playlist?list=PL_m-qmrTyRPxR01vXMeUuok4q1MgZvUZv][git commands - YouTube]]
  - [[https://www.youtube.com/playlist?list=PL-osiE80TeTuRUfjRe54Eea17-YfnOOAx][Git Tutorials - YouTube]]
  - [[https://www.youtube.com/watch?v=mtliRYQd0j4][Rewrite git history with Emacs, magit and git rebase - YouTube]]
  - [[https://www.lvguowei.me/post/magit-rebase/][Magit tutorial - Rebase (Part I)]] - [[https://www.lvguowei.me/post/magit-rebase-2/][(Part II)]]
  - [[https://www.lvguowei.me/post/magit-tutorial-bisect/][Magit Tutorial - Bisecting]]
  - [[https://medium.com/@fredrikmorken/why-you-should-stop-using-git-rebase-5552bee4fed1][Why you should stop using Git rebase – Fredrik V. Mørken]]
  - [[https://nathanleclaire.com/blog/2014/09/14/dont-be-scared-of-git-rebase/][Don't Be Scared of git rebase | I care, I share, I'm Nathan LeClaire]]
  - [[https://www.concrete.com.br/2017/09/04/git-para-corajosos-rebase-parte-1/][Concrete | Git para Corajosos – Rebase (Parte 1)]]
  - [[https://www.concrete.com.br/2018/04/11/git-para-corajosos-rebaes-parte-2/][Concrete | Git para Corajosos – Rebase (Parte 2)]]
  - [[https://www.concrete.com.br/2015/10/22/voce-nao-sabia-sobre-o-git/][Concrete | 9 coisas que você não sabia sobre o GIT]]
  - [[https://www.git-tower.com/learn/git/ebook/en/command-line/advanced-topics/rebase][Rebase as an Alternative to Merge]]
  - [[https://hackernoon.com/git-merge-vs-rebase-whats-the-diff-76413c117333][Git Merge vs. Rebase: What’s the Diff? – Hacker Noon]]
  - [[https://hackernoon.com/tagged/git][Git – Hacker Noon]]
  - [[https://www.sbf5.com/~cduan/technical/git/][Understanding Git Conceptually]]
  - [[http://teohm.com/blog/learning-git-internals-by-example/][Learning Git Internals by Example - teohm]]
  - [[https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=3&cad=rja&uact=8&ved=2ahUKEwiR1KCA9L7fAhVDH5AKHaneAsMQwqsBMAJ6BAgCEAQ&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DP6jD966jzlk&usg=AOvVaw3GlViL1GUJabPMblAI5l6L][YouTube: Git Internals - How Git Works - Fear Not The SHA!]]
  - [[https://medium.com/@pawan_rawal/demystifying-git-internals-a004f0425a70][Medium: Demystifying Git internals – Pawan Rawal]]
  - [[https://blog.angularindepth.com/become-a-git-pro-by-learning-git-architecture-in-15-minutes-9c995db6faeb][Become a GIT pro by learning GIT architecture in 15 minutes]]
  - [[https://itnext.io/become-a-git-pro-in-just-one-blog-a-thorough-guide-to-git-architecture-and-command-line-interface-93fbe9bdb395][Become a Git pro in just one blog. A thorough guide to Git architecture and command line interface]]
  - [[https://news.ycombinator.com/item?id=16586811][Key Git Concepts Explained the Hard Way | Hacker News]]
  - [[https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud][Learn Git with Bitbucket Cloud]]
  - [[http://eagain.net/articles/git-for-computer-scientists/][Git for Computer Scientists]]
* Installing git
  - [[https://git-scm.com/downloads][Git - Downloads]]
  - With your favorite package manager
    [[https://wiki.gentoo.org/wiki/Git][git - Gentoo Wiki]]
    #+BEGIN_SRC sh
      emerge --ask --verbose dev-vcs/git          # as root user
    #+END_SRC
  - [[https://www.cygwin.com/][Cygwin]] - get git and the whole enchilada
  - chocolatey, msys2, bash on windows, etc.
* Magit
  Oh, yeah, Magit ROCKS!
  - [[https://magit.vc/][It's Magit! A Git Porcelain inside Emacs]]
  - [[file:magit.org][Magit]]
  - [[https://github.com/magit/magit/wiki/Cheatsheet][Cheatsheet · magit/magit Wiki · GitHub]]
* Setting a GitHub repository
  - [[https://help.github.com/][GitHub Help]]
* Create a new repository and export to GitHub
  - [[https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository][Pro Git - Getting a Git Repository]]
  - Initialize a git repository
    #+BEGIN_SRC sh
      cd ~/your/working/tree/location
      echo "#+TITLE: sandbox" > README.org
      git init
      git config user.name "energos"
      git config user.email "energos@users.noreply.github.com"
      git remote add origin git@github.com:energos/sandbox.git
      git add README.org
      git commit -m "Initial commit"
      git push -u origin master  # -u == --set-upstream
    #+END_SRC
* Working Tree / Staging Area / Repository
  - [[https://git-scm.com/book/en/v2/Getting-Started-Git-Basics][Pro Git - Git Basics]]
  - Data flow
    #+BEGIN_EXAMPLE
      Working       Staging      .git Local         Remote
      Tree          Area         Repository         Repository
        |             |              |                  |
        |--- Stage -->|--- Commit -->|-------- Push --->|
        |                            |                  |
        |<-------- Checkout ---------|<------- Fetch ---|
        |                            |                  |
        |<--------- Merge -----------|<-                |
        |                               \               |
        |<-------------------------------+-<-- Pull ----|
    #+END_EXAMPLE
* Command line help
  - [[https://git-scm.com/book/en/v2/Getting-Started-Getting-Help][Pro Git - Getting Help]]
  - Git help
    #+BEGIN_SRC sh
      git help
      git --help
      git help $verb
      git $verb --help
      man git
      man git-$verb
    #+END_SRC
* Add
  - [[https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository][Pro Git - Recording Changes to the Repository]]
  - Adding (staging) files
    #+BEGIN_SRC sh
      git add $file                       # stage file $file
      git add -A                          # stage all files
      git stage $file                     # 'git stage' is a synonym for 'git add'
    #+END_SRC
  - Undo an Add (Unstage)
    #+BEGIN_SRC sh
      git reset HEAD $file
    #+END_SRC
* Discard changes to a file
  - [[https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things][Pro Git - Undoing Things]]
  - Unstaged changes
    #+BEGIN_SRC sh
      git checkout -- $file
    #+END_SRC
  - Staged changes
    First, unstage the changes
    #+BEGIN_SRC sh
      git reset HEAD $file
    #+END_SRC
    then, discard the changes
    #+BEGIN_SRC sh
      git checkout -- $file
    #+END_SRC
* Diff
  - Unstaged changes
    #+BEGIN_SRC sh
      git diff
    #+END_SRC
  - Staged changes
    #+BEGIN_SRC sh
      git diff --staged
      git diff --cached                   # '--staged' is a synonym of '--cached'
    #+END_SRC
* Log
  - [[https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History][Pro Git - Viewing the Commit History]]
  - man:git-log
  - Git log
    #+BEGIN_SRC sh
      git log
      git log --stat
      git log -p
      git log -1
      git log --pretty=oneline
      git log --pretty=format:"%h: %s - %ar" --graph
      git log --oneline
      git log --oneline --since=6.hours
      git log --oneline -i --grep remove
      git log --oneline -i -Shello
      git log --oneline -- foo.txt
      git log --oneline --all --graph
      git --no-pager log --oneline --all --graph
    #+END_SRC
** A bunch of unsorted links
   - [[https://stackoverflow.com/questions/2183900/how-do-i-prevent-git-diff-from-using-a-pager][How do I prevent git diff from using a pager? - Stack Overflow]]
   - [[https://git-scm.com/docs/pretty-formats][Git - pretty-formats Documentation]]
   - [[https://stackoverflow.com/questions/1057564/pretty-git-branch-graphs][git log - Pretty git branch graphs - Stack Overflow]]
   - [[https://coderwall.com/p/euwpig/a-better-git-log][A better git log (Example)]]
   - [[https://stackoverflow.com/questions/30551818/git-pretty-format-string-equivalent-of-oneline-including-colors][Git pretty format string equivalent of oneline, including colors - Stack Overflow]]
   - [[http://sweetme.at/2013/09/13/git-logs-with-color/][Git Logs with Color and Graphs - Sweetmeat]]
   - [[https://dev.to/drews256/i-love-git-log-off][I love git log - DEV Community]]
   - [[https://stackoverflow.com/questions/1057564/pretty-git-branch-graphs][git log - Pretty git branch graphs - Stack Overflow]]
   - [[https://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git/34467298#34467298][Visualizing branch topology in git - Stack Overflow]]
   - [[https://coderwall.com/p/1ixwdw/nice-compact-and-colorized-git-log][Nice compact and colorized git log (Example)]]
   - [[https://coderwall.com/p/euwpig/a-better-git-log][A better git log (Example)]]
** Pretty formats
   [[man:git-log#PRETTY%20FORMATS][Pretty Formats section on git-log man page]]
   - oneline
   - short
   - medium (default)
   - full
   - email
   - raw
   - format:<string> or tformat:<string>
     + %H: commit hash
     + %h: abbreviated commit hash
     + %T: tree hash
     + %t: abbreviated tree hash
     + %P: parent hashes
     + %p: abbreviated parent hashes
     + %an (%aN): author name
     + %ae (%aE): author email
     + %ad (%aD): author date
     + %ar: author date, relative
     + %at: author date, UNIX timestamp
     + %ai (%aI): author date, ISO 8601 format
     + %cn (%cN): commiter name
     + %ce (%cE): commiter email
     + %cd (%cD): commiter date
     + %cr: commiter date, relative
     + %ct: commiter date, UNIX timestamp
     + %ci (%cI): commiter date, ISO 8601 format
     + %d (%D): ref names
     + %e: encoding ???
     + %s: subjetc
     + %f: sanitized subject line, suitable for a filename
     + %b: (%B): body
     + %N: commit notes
     + %GG: %G?: %GS: %GK: %gD: %gd: %gn: %gN: %ge: %gE: %gs: postponed...
     + %Cred: %Cgreen: %Cblue: %Creset: change colors
     + %C(...): color specification, see [[man:git-config#CONFIGURATION%20FILE][git-config manpage: Configuration File]]
     + %m: left (<), right (>) or boundary (-) mark postponed...
     + %n: newline
     + %%: a raw %
     + %x00: print hex byte
     + %w([<w>[,<i1>[,<i2>]]]): postponed...
     + %<(<N>[,trunc|ltrunc|mtrunc]): postponed...
     + %<|(<N>): postponed...
     + %>(<N>) %>|(<N>): postponed...
     + %>>(<N>) %>>|(<N>): postponed...
     + %><(<N>) %><|(<N>): postponed...
     + %(trailers[:options]): postponed...
** My own take on a pretty log
   : git log --graph --pretty=tformat:'%C(auto)%h%d %s %C(cyan)(%ar)%C(reset)'
   : git log --graph --pretty=tformat:'%C(auto)%h%d %s %C(cyan)(%ar)%C(reset) %C(bold blue)%an%C(reset)'
* Remotes
  - [[https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes][Pro Git - Working with Remotes]]
  - man:git-remote
** Examples
   - Add remote
     #+BEGIN_SRC sh
       git remote add origin git@github.com:energos/sandbox.git
     #+END_SRC
   - Show remotes
     #+BEGIN_SRC sh
       git remote -v
       git remote show origin
       git ls-remote
     #+END_SRC
   - Fetch and Pull
     #+BEGIN_SRC sh
       git fetch $remote
       git fetch origin
       git pull origin                     # 'git pull' = 'git fetch' + 'git merge'
     #+END_SRC
   - Push
     #+BEGIN_SRC sh
       git push $remote $branch
       git push origin master
     #+END_SRC
   - Rename and Remove
     #+BEGIN_SRC sh
       git remote rename $remote-name $remote-new-name
       git remote rm $remote-name
     #+END_SRC
* Tags
  - [[https://git-scm.com/book/en/v2/Git-Basics-Tagging][Pro Git - Tagging]]
  - man:git-tag
** Examples
   #+BEGIN_SRC sh
     git tag                                 # list tags
     git tag -l                              # list tags
     git tag -l $pattern                     # list tags matching $pattern
     git tag $tagname                        # create a lightweight tag
     git tag -a $tagname                     # create an annotated tag
     git tag -a $tagname -m "annotation"     # create an annotated tag
     git tag -d $tagname                     # delete tag
     git tag $tagname $commit                # tag a specific commit
     git push $remote $tagname               # push tag to remote server
     git push $remote --tags                 # push all tags to remote server
   #+END_SRC
* Aliases
  - [[https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases][Pro Git - Git Aliases]]
    #+BEGIN_SRC sh
      git config alias.last 'log -1 HEAD'
    #+END_SRC
* Branches
  - [[https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell][Pro Git - Branching]]
  - man:git-branch
** Branching
  : git checkout -b <branch>
  or
  : git branch <branch>
  : git checkout <branch>
** Track a remote branch
  [[http://gitimmersion.com/lab_45.html][Lab 45: Adding a tracking Branch - Git Immersion]]
  : git branch --track <branch> origin/<branch>
  [[http://gitimmersion.com/lab_47.html][Lab 47 - Git Immersion]]
  : git remote add shared ../hello.git
  'shared' é o name dado ao remote. Poderia ser qualquer coisa.

** Examples
   - Create new branch, named 'testing' in this example
     #+BEGIN_SRC sh
       git branch testing
     #+END_SRC
   - Switch to the new (or other existing) branch
     #+BEGIN_SRC sh
       git checkout testing
     #+END_SRC
   - Create new branch and switch to it in one command
     This is equivalent to the 2 previous commands
     #+BEGIN_SRC sh
       git checkout -b testing
     #+END_SRC
   - Edit some stuff and do a commit in the brand new branch
     #+BEGIN_SRC sh
       git commit -a -m 'My brand new "testing" branch'
     #+END_SRC
   - Edit some stuff without commiting
   - Switch back to master branch
     #+BEGIN_SRC sh
       git checkout master
     #+END_SRC
     Cool! You will be warned if your tree is 'dirty':
     #+BEGIN_EXAMPLE
       error: Your local changes to the following files would be overwritten by checkout:
       git.org
       Please commit your changes or stash them before you switch branches.
       Aborting
     #+END_EXAMPLE
   - So, let's commit it in "testing" before branching back to "master"
     #+BEGIN_SRC sh
       git commit -a -m 'Add more stuff in "testing" branch'
     #+END_SRC
   - Created a "testing" branch. Added some stuff to it.
   - Now back to "master" branch. Do some editing and then commit:
     #+BEGIN_SRC sh
       git checkout master
     #+END_SRC
     edit some stuff
     #+BEGIN_SRC sh
       git commit -a -m 'Back to "master" again'
     #+END_SRC
   - To get a nice log of all branches:
     #+BEGIN_SRC sh
       git log --oneline --all --graph
     #+END_SRC
   - Merge time baby
     #+BEGIN_SRC sh
       git merge testing
     #+END_SRC
   - Delete old branch (optional)
     #+BEGIN_SRC sh
       git branch -d testing
     #+END_SRC
   - List current branches
     #+BEGIN_SRC sh
       git branch
       git branch -v
       git branch -a
       git branch --merged
       git branch --no-merged
     #+END_SRC
   - Remote branches
     #+BEGIN_SRC sh
       git branch -r
       git remote -v
       git remote show origin
       git ls-remote
     #+END_SRC
   - Tracking branches
     #+BEGIN_SRC sh
       git checkout -b $branch $remote/$branch

       # is equivalent to
       git checkout --track $remote/$branch

       # if local $branch doesn't exist and  matches a name on only one remote
       # is equivalent to
       git checkout $branch

       git branch -vv
     #+END_SRC
   - Delete a remote branch
     #+BEGIN_SRC sh
       git push $remote --delete $branch
     #+END_SRC
   - Rename a branch
     #+BEGIN_SRC sh
       git branch -m $old_name $new_name
     #+END_SRC
   - Rename a remote branch
     #+BEGIN_SRC sh
       git branch -m $old_name $new_name
       git push $remote --delete $old_name
       git push $remote $new_name
     #+END_SRC
   - Public branches
     Branches are not automatically pushed. You have to explicitly push the branch
     you want to share.
     If you push the branch, it will be a public branch.
     Yada yada yada, this is public talk. Enjoy the show.
     For now this branch is still private.
     #+BEGIN_EXAMPLE
       $ git branch -vv
         master  0dbd592 [origin/master] Tracking branches
         private 3912216 Start a private branch
       * public  a186c58 Start a public branch
     #+END_EXAMPLE
     Let's edit a bit more, commit it and push it, to see what will happen.
     #+BEGIN_EXAMPLE
       $ git branch -vv
         master  0dbd592 [origin/master] Tracking branches
         private 3912216 Start a private branch
       * public  eebb246 Pushing a private branch
     #+END_EXAMPLE
     The branch was pushed but it is still not a tracking branch.
     All branches needs to be explicitly pushed. There is a git config somewhere
     that allows automatic pushing of tracking branches.
   - How to mark a branch as a tracking branch?
     #+BEGIN_EXAMPLE
       $ git branch -vv
         master  0dbd592 [origin/master] Tracking branches
         private 3912216 Start a private branch
       * public  eebb246 Pushing a private branch
     #+END_EXAMPLE
     #+BEGIN_SRC sh
       git branch -u origin/public public
     #+END_SRC
     #+BEGIN_EXAMPLE
       $ git branch -vv
       * master  137285a [origin/master] How to define a tracking branch?
         private 3912216 Start a private branch
         public  e3c9338 [origin/public: ahead 2] Pushing a public branch
     #+END_EXAMPLE
   - Merging \\
     Merge creates a new commit pointing to the parent branches.

     This is the first commit in the 'master' branch after branching
     the 'experiment' branch. The parent commit is "7a722bb".

     This is the first commit in the 'experiment' branch,
     branched from 'master' commit "7a722bb".

     Merging the 'experiment' branch into the 'master' branch creates a new commit.
     You are seeing the result of this merge.
   - Rebasing \\
     Rebase changes already existing commits.
     Rebase changes history.
     Rebase carefully!
* Reset
  - [[https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified][Git - Reset Demystified]]
  - git reset --soft            - não toca na árvore nem no cache (index)
  - git reset --mixed (default) - modifica o cache (index)
  - git reset --hard (danger!)  - modifica árvore e cache (index)
** Unstage a file
   : git reset HEAD <a_file>
** Remove last commit
   : git reset --hard HEAD~
** Revert last commit
   : git revert HEAD
* Multiple remote servers
  #+BEGIN_SRC sh
    git remote add git@gitlab.com:nononono/sandbox.git
  #+END_SRC
* Moving files
  : mkdir <new_dir>
  : git mv <some_file> <new_dir>
  or
  : mkdir <new_dir>
  : mv <some_file> <new_dir>
  : git add <new_dir>/<some_file>
  : git rm <some_file>

* Git hosting servers
  - [[https://github.com/][GitHub]]
  - [[https://gitlab.com/][GitLab]]
    + [[https://gitlabfan.com/][GitLab Fan Club]]
    + [[https://scotch.io/tutorials/how-to-setup-gitlab-a-self-hosted-github][How to Setup GitLab: A Self Hosted GitHub]]
  - [[https://bitbucket.org/][Bitbucket]]
  - [[https://gitea.io/en-US/][Gitea]]
  - [[https://gogs.io/][Gogs]]
  - [[http://gitolite.com/gitolite/][Gitolite]] + [[https://git.zx2c4.com/cgit/about/][cgit - A hyperfast web frontend for git repositories written in C]]
  - Self hosted
* Using meld as a diff tool
  #+BEGIN_SRC sh
    git config diff.tool meld
    git config difftool.prompt false
  #+END_SRC
* Using meld as a merge tool
  - [[http://meldmerge.org/help/resolving-conflicts.html][Meld - Resolving merge conflicts]]
  - [[https://www.youtube.com/watch?v=3Qynj8WUwgs&index=9&t=213s&list=PLeo1K3hjS3usJuxZZUBdjAcilgfQHkRzW][Git/Github Tutorial 9: Diff and Merge using meld]]
  #+BEGIN_SRC sh
    git config merge.tool meld
    git config mergetool.keepBackup false
  #+END_SRC
* Force push
  - [[https://estl.tech/a-gentler-force-push-on-git-force-with-lease-fb15701218df][A gentler force push on git: Force-with-lease – Engineering Tomorrow’s Systems]]
  - [[https://evilmartians.com/chronicles/git-push---force-and-how-to-deal-with-it][git push --force and how to deal with it — Martian Chronicles]] 
* Unsorted notes
  - [[https://github.com/github/gitignore][GitHub - A collection of useful .gitignore templates]]
  - [[https://stackoverflow.com/questions/5097456/][Throw away local commits in git - Stack Overflow]]
